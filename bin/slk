#!/usr/bin/env node

'use strict';

var _ = require('lodash'),
  async = require('async'),
  program = require('commander'),
  api = require('../lib/api'),
  moment = require('moment'),
  colors = require('colors');

process.title = 'slk';

var listenById = function(channel, users, oldest) {
  var who = function(post) {
    if(post.username) {
      return post.username;
    }
    if(post.user) {
      return users[post.user] || post.user;
    }

    return 'UNKNOWN';
  };

  var what = function(post) {
    var ret = post.text || '';

    _.each(post.attachments, function(a) {
      ret += a.text;
    });

    return ret;
  }; 

  var when = function(post) {
    var m = moment(Math.round(post.ts) * 1000);
    return m.format('Do MMM HH:mm');
  };

  return api.channelsHistory(program.token, channel, oldest, function(e, results) {
    if (e) {
      console.error(e);
      process.exit(1);
    }
    var sorted = _.sortBy(results.messages, function(m) {
      return parseFloat(m.ts);
    });

    var latest = oldest;
    _.each(sorted, function(m) {
      latest = parseFloat(m.ts);
      console.log(who(m).green, ('(' + when(m) + ')').grey);
      console.log(what(m));
    });

    return setTimeout(function() {
      return listenById(channel, users, latest);
    }, 30000);
  });
};

var listen = function(name) {

  var getChannelId = function(cb) {
    return api.getChannelId(program.token, name, cb);
  };

  var getUsers = function(cb) {
    return api.usersList(program.token, cb);
  }

  var startListening = function(e, results) {
    if(e) {
      console.error(e);
      return process.exit(1);
    }
    
    return listenById(results[0], results[1]);
  }

  return async.parallel([getChannelId, getUsers], startListening);
};

program
  .option('-t, --token <token>', 'set the authentication token')

program
  .command('listen <channel>')
  .description('listen to a channel')
  .action(listen);

program.parse(process.argv);
